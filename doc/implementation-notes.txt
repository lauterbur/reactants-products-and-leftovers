Implementation notes for "Reactants, Products and Leftovers" simulation

Start by reading model.txt.

Substances, reactants and products are implemented by types Substance, Reactant and Product, respectively.

Chemical reactions are implemented by type Reaction. The algorithm for computing quantities (described in model.txt)
is implemented in methods getNumberOfReactions and update.

The "Sandwiches" analogy is implemented as a single-product reaction. The sandwich recipe defines the reaction equation.
Sandwich ingredients are reactants, and the completed sandwich is the product.

The Game screen is controlled by a state machine. There are 3 top-level "phases" of a game, as described in
GamePhase. While playing a challenge, the Game will be in one of the "states" described in PlayState.

Generation of challenges for the Game screen is described in the documentation for ChallengeFactory.

Game 'level' is numbered starting from zero throughout the model, and displayed from 1 in the view.
Ie, model.level === 0 is displayed as 'Level 1'.

In this sim, view components typically have a lifetime that is shorter than their associated model components.
Those view components implement a dispose function, which unlinks observers from AXON properties in the model.
To prevent memory leaks, it's essential to call dispose when you're done view components. Failure to unlink
from AXON properties tends to be the main cause of memory leaks.